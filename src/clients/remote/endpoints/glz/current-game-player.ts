/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios from "axios";
import { currentGamePlayerEndpoint } from "valorant-api-types";
import { parseResponseDataFor, buildSuffix } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { AxiosRequestConfigWithData } from "~/utils/lib/axios";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";
import { type RemoteApiClient } from "~/clients/remote";

type CurrentGamePlayerSuffixData = { puuid: string };

export interface CurrentGamePlayerRequestConfig
  extends AxiosRequestConfigWithData<CurrentGamePlayerSuffixData>,
    CustomAxiosRequestConfig {}

export type CurrentGamePlayerResponse = z.infer<
  (typeof currentGamePlayerEndpoint.responses)["200"]
>;

export class CurrentGamePlayerRemoteApiEndpoint {
  /**
   * @description Get the current game match ID for the provided player
   */
  getCurrentGamePlayer<T = CurrentGamePlayerResponse>(
    this: RemoteApiClient,
    config: CurrentGamePlayerRequestConfig,
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "GET",
      baseURL: this.getServerUrl(currentGamePlayerEndpoint.type),
      url: buildSuffix(currentGamePlayerEndpoint.suffix, config.data),
      ...config,
      transformRequest: [
        parseResponseDataFor(currentGamePlayerEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(
                currentGamePlayerEndpoint,
                config.customResponseParser,
              ),
            ],
          }
        : {}),
    });
  }
}
