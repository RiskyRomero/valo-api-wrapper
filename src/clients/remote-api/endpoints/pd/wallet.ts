/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios, { type AxiosResponse } from "axios";
import { walletEndpoint } from "valorant-api-types";
import { parseResponseDataFor, buildSuffix } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { AxiosRequestConfigWithData } from "~/utils/lib/axios";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";
import { type RemoteApiClient } from "~/clients/remote-api";

type WalletSuffixData = { puuid: string };

export interface WalletRequestConfig
  extends AxiosRequestConfigWithData<WalletSuffixData>,
    CustomAxiosRequestConfig {}

export type WalletRawResponse = z.input<
  (typeof walletEndpoint.responses)["200"]
>;

export type WalletResponse = z.output<(typeof walletEndpoint.responses)["200"]>;

export class WalletRemoteApiEndpoint {
  /**
   * @description Get the current wallet balance for the user
   */
  getWallet<T = WalletRawResponse>(
    this: RemoteApiClient,
    config: WalletRequestConfig & { parseResponseData: false },
  ): Promise<AxiosResponse<T>>;
  getWallet<T = WalletResponse>(
    this: RemoteApiClient,
    config?: WalletRequestConfig,
  ): Promise<AxiosResponse<T>>;
  getWallet<T = WalletResponse>(
    this: RemoteApiClient,
    config: WalletRequestConfig,
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "GET",
      baseURL: this.getServerUrl(walletEndpoint.type),
      url: buildSuffix(walletEndpoint.suffix, config.data),
      ...config,
      transformRequest: [
        parseResponseDataFor(walletEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(walletEndpoint, config.customResponseParser),
            ],
          }
        : {}),
    });
  }
}
