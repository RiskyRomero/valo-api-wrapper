/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios, { type AxiosResponse } from "axios";
import { selectCharacterEndpoint } from "valorant-api-types";
import { parseResponseDataFor, buildSuffix } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { AxiosRequestConfigWithData } from "~/utils/lib/axios";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";
import { type RemoteApiClient } from "~/clients/remote-api";

type SelectCharacterSuffixData = { preGameMatchId: string; agentId: string };

export interface SelectCharacterRequestConfig
  extends AxiosRequestConfigWithData<SelectCharacterSuffixData>,
    CustomAxiosRequestConfig {}

export type SelectCharacterRawResponse = z.input<
  (typeof selectCharacterEndpoint.responses)["200"]
>;

export type SelectCharacterResponse = z.output<
  (typeof selectCharacterEndpoint.responses)["200"]
>;

export class SelectCharacterRemoteApiEndpoint {
  /**
   * @description Select an agent
   * **DO NOT USE THIS FOR INSTALOCKING**
   * Riot doesn't like this. You may get banned or get the API restricted for the rest of us.
   */
  postSelectCharacter<T = SelectCharacterRawResponse>(
    this: RemoteApiClient,
    config: SelectCharacterRequestConfig & { parseResponseData: false },
  ): Promise<AxiosResponse<T>>;
  postSelectCharacter<T = SelectCharacterResponse>(
    this: RemoteApiClient,
    config?: SelectCharacterRequestConfig,
  ): Promise<AxiosResponse<T>>;
  postSelectCharacter<T = SelectCharacterResponse>(
    this: RemoteApiClient,
    config: SelectCharacterRequestConfig,
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "POST",
      baseURL: this.getServerUrl(selectCharacterEndpoint.type),
      url: buildSuffix(selectCharacterEndpoint.suffix, config.data),
      ...config,
      transformRequest: [
        parseResponseDataFor(selectCharacterEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(
                selectCharacterEndpoint,
                config.customResponseParser,
              ),
            ],
          }
        : {}),
    });
  }
}
