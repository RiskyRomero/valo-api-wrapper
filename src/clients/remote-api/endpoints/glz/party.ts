/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios, { type AxiosResponse } from "axios";
import { partyEndpoint } from "@tqman/valorant-api-types";
import { parseResponseDataFor, buildSuffix } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { AxiosRequestConfigWithData } from "~/utils/lib/axios";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";
import { type RemoteApiClient } from "~/clients/remote-api";

type PartySuffixData = { partyId: string };

export interface PartyRequestConfig
  extends AxiosRequestConfigWithData<PartySuffixData>,
    CustomAxiosRequestConfig {}

export type PartyResponse = z.input<(typeof partyEndpoint.responses)["200"]>;

export type PartyParsedResponse = z.output<
  (typeof partyEndpoint.responses)["200"]
>;

export class PartyRemoteApiEndpoint {
  /**
   * @description Get the party information for the given party ID
   */
  getParty<T = PartyParsedResponse>(
    this: RemoteApiClient,
    config: PartyRequestConfig & { parseResponseData: true },
  ): Promise<AxiosResponse<T>>;
  getParty<T = PartyResponse>(
    this: RemoteApiClient,
    config?: PartyRequestConfig,
  ): Promise<AxiosResponse<T>>;
  getParty<T = PartyResponse>(
    this: RemoteApiClient,
    config: PartyRequestConfig,
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "GET",
      baseURL: this.getServerUrl(partyEndpoint.type),
      url: buildSuffix(partyEndpoint.suffix, config.data),
      ...config,
      transformRequest: [
        parseResponseDataFor(partyEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(partyEndpoint, config.customResponseParser),
            ],
          }
        : {}),
    });
  }
}
