/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios, { type AxiosResponse } from "axios";
import { type AxiosRequestConfig } from "axios";
import { fetchContentEndpoint } from "valorant-api-types";
import { parseResponseDataFor } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";
import { type RemoteApiClient } from "~/clients/remote-api";

export interface FetchContentRequestConfig
  extends AxiosRequestConfig,
    CustomAxiosRequestConfig {}

export type FetchContentResponse = z.input<
  (typeof fetchContentEndpoint.responses)["200"]
>;

export type FetchContentParsedResponse = z.output<
  (typeof fetchContentEndpoint.responses)["200"]
>;

export class FetchContentRemoteApiEndpoint {
  /**
   * @description Get a list of seasons, acts, and events
   */
  getFetchContent<T = FetchContentParsedResponse>(
    this: RemoteApiClient,
    config: FetchContentRequestConfig & { parseResponseData: true },
  ): Promise<AxiosResponse<T>>;
  getFetchContent<T = FetchContentResponse>(
    this: RemoteApiClient,
    config?: FetchContentRequestConfig,
  ): Promise<AxiosResponse<T>>;
  getFetchContent<T = FetchContentResponse>(
    this: RemoteApiClient,
    config: FetchContentRequestConfig = {},
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "GET",
      baseURL: this.getServerUrl(fetchContentEndpoint.type),
      url: fetchContentEndpoint.suffix,
      ...config,
      transformRequest: [
        parseResponseDataFor(fetchContentEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(
                fetchContentEndpoint,
                config.customResponseParser,
              ),
            ],
          }
        : {}),
    });
  }
}
