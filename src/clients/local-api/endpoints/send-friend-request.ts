/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios, { type AxiosResponse } from "axios";
import { sendFriendRequestEndpoint } from "@tqman/valorant-api-types";
import { parseResponseDataFor } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { AxiosRequestConfigWithData } from "~/utils/lib/axios";
import { type LocalApiClient } from "~/clients/local-api";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";

type SendFriendRequestBodyData = z.infer<typeof sendFriendRequestEndpoint.body>;

export interface SendFriendRequestRequestConfig
  extends AxiosRequestConfigWithData<SendFriendRequestBodyData>,
    CustomAxiosRequestConfig {}

export type SendFriendRequestResponse = z.input<
  (typeof sendFriendRequestEndpoint.responses)["200"]
>;

export type SendFriendRequestParsedResponse = z.output<
  (typeof sendFriendRequestEndpoint.responses)["200"]
>;

export class SendFriendRequestLocalApiEndpoint {
  /**
   * @description Sends a friend request to a player. Can be used in conjunction with [GET Friend Requests] and [DELETE Remove Friend Request] to determine a player's PUUID from their game name.
   */
  postSendFriendRequest<T = SendFriendRequestParsedResponse>(
    this: LocalApiClient,
    config: SendFriendRequestRequestConfig & { parseResponseData: true },
  ): Promise<AxiosResponse<T>>;
  postSendFriendRequest<T = SendFriendRequestResponse>(
    this: LocalApiClient,
    config: SendFriendRequestRequestConfig,
  ): Promise<AxiosResponse<T>>;
  postSendFriendRequest<T = SendFriendRequestResponse>(
    this: LocalApiClient,
    config: SendFriendRequestRequestConfig,
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "POST",
      url: sendFriendRequestEndpoint.suffix,
      ...config,
      transformRequest: [
        parseResponseDataFor(sendFriendRequestEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(
                sendFriendRequestEndpoint,
                config.customResponseParser,
              ),
            ],
          }
        : {}),
    });
  }
}
