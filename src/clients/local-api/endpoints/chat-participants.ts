/* THIS IS AN AUTOGENERATED FILE - DO NOT EDIT */

import { z } from "zod";
import axios from "axios";
import { type AxiosRequestConfig } from "axios";
import { chatParticipantsEndpoint } from "valorant-api-types";
import { parseResponseDataFor } from "~/helpers/endpoints";
import { ensureArray } from "~/utils/array";
import { type LocalApiClient } from "~/clients/local-api";
import { type CustomAxiosRequestConfig } from "~/clients/common/types";

export interface ChatParticipantsRequestConfig
  extends AxiosRequestConfig,
    CustomAxiosRequestConfig {}

export type ChatParticipantsResponse = z.infer<
  (typeof chatParticipantsEndpoint.responses)["200"]
>;

export class ChatParticipantsLocalApiEndpoint {
  /**
   * @description Get information about the participants of all active conversations or a specific conversation if a cid is provided
   */
  getChatParticipants<T = ChatParticipantsResponse>(
    this: LocalApiClient,
    config: ChatParticipantsRequestConfig = {},
  ) {
    const shouldParseResponse =
      config.parseResponseData ?? this.options.parseResponseData;

    return this.axiosInstance<T>({
      method: "GET",
      url: chatParticipantsEndpoint.suffix,
      ...config,
      transformRequest: [
        parseResponseDataFor(chatParticipantsEndpoint),
        ...ensureArray(axios.defaults.transformRequest),
      ],
      ...(shouldParseResponse
        ? {
            transformResponse: [
              ...ensureArray(axios.defaults.transformResponse),
              parseResponseDataFor(
                chatParticipantsEndpoint,
                config.customResponseParser,
              ),
            ],
          }
        : {}),
    });
  }
}
